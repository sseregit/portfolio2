package com.iot.pf.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.iot.pf.dto.Attachment;
import com.iot.pf.dto.Board;
import com.iot.pf.service.BoardService;
import com.iot.pf.util.FileUtil;

@Controller
public class BoardController {
	
	private Logger log = Logger.getLogger(BoardController.class);

	@Autowired
	BoardService bs;
	
	@Autowired
	FileUtil fu;
	

	@RequestMapping("/formGeneral3.do")
	public ModelAndView board(@RequestParam HashMap<String,Object> params) {
			
		ModelAndView mv = new ModelAndView();
		// 총 게시글 수
				int totalArticle = bs.count();
				// 한 페이지 보여줄 게시글수
				int pageArticleCnt = 10;
				//총 페이지수
				int totalPage = 0;
				if(totalArticle % pageArticleCnt == 0) {
					totalPage = totalArticle / pageArticleCnt;
				}
				else{
					totalPage = totalArticle / pageArticleCnt + 1;
				}
				// 현재 페이지 번호 
				int currentPageNo = 1;
				if(params.containsKey("currentPageNo")) {
					currentPageNo = Integer.parseInt(params.get("currentPageNo").toString());
				}		
				// 시작게시글
				int startArticleNo = (currentPageNo - 1) * pageArticleCnt;
				// 페이지 블럭수
				int pageBlockSize = 10;
				//페이지 블럭 시작값
				int pageBlockStart = 0;
				pageBlockStart = (currentPageNo - 1) / pageBlockSize * pageBlockSize + 1;
				//페이지 블럭 종료값
				int pageBlockEnd = 0;
				pageBlockEnd = (currentPageNo - 1) / pageBlockSize * pageBlockSize + pageBlockSize;
				pageBlockEnd = (pageBlockEnd >= totalPage) ? totalPage : pageBlockEnd;


				params.put("startArticleNo", startArticleNo);
				params.put("pageArticleCnt", pageArticleCnt);
		
				ArrayList<Board> result = bs.list(params);
		
        
				mv.addObject("result", result);
				mv.addObject("pageBlockStart",pageBlockStart);
				mv.addObject("pageBlockEnd",pageBlockEnd);
				mv.addObject("totalPage",totalPage);
				mv.addObject("pageBlockSize",pageBlockSize);
				mv.addObject("currentPageNo",currentPageNo);

		        mv.setViewName("form-general3");
		
				return 	mv;
		
	}
	//에러
	@RequestMapping("/error.do")
	public ModelAndView error(@RequestParam HashMap<String,Object> params) {
		
		ModelAndView mv = new ModelAndView();
		
		mv.addObject("nextLocation",params.get("nextLocation").toString());
		mv.setViewName("error");
		
		return mv;
		
	}
	
	// 글쓰기 보여주는 
	@RequestMapping("/write.do")
	public ModelAndView write(@RequestParam HashMap<String,Object> params){
		ModelAndView mv = new ModelAndView();
		
		mv.setViewName("write");
		
		return mv;
		
		
	}
	
	//글쓰기 받아오는
	@RequestMapping("/bs/write.do")
	@ResponseBody
	public HashMap<String,String> bswrite(HttpSession session,@RequestBody(required=false)HashMap<String,Object> attaches) {
		
		log.debug("JYS write.do = " + attaches);
		
		String title = attaches.get("title").toString();
		
		String content = attaches.get("content").toString();
		
		//이미 업로드된 첨부파일에 대한 정보
		
		List<LinkedHashMap<String,String>> fileMap = (List<LinkedHashMap<String, String>>)attaches.get("attaches");
		
		List<Attachment> files = null;
		
		Attachment att = null;
		// 이미 업로드 된 첨부파일에 대한 정보는 LinkedHashMap으로 받아 오기에 Attachment로 변경해주어야 한다.
		if(fileMap.size() > 0) {
			files = new ArrayList<Attachment>();
			
			for(LinkedHashMap<String,String> m : fileMap) {
				att = new Attachment();
				att.setAttachDocType(m.get("attachDocType"));
				att.setFileName(m.get("filename"));
				att.setFakeName(m.get("fakeName"));
				att.setContentType(m.get("contentType"));
				att.setFileSize(Long.parseLong(String.valueOf(m.get("fileSize"))));
				
				files.add(att);
			}
		}
		
		HashMap<String,String> result = new HashMap<String,String>();
		
		Board board = new Board();
		
		if(session.getAttribute("userId") != null) {
			board.setUserId(session.getAttribute("userId").toString());
			board.setTitle(title);
			board.setHasFile((files == null || files.size() == 0) ? "0" : "1");
			board.setContent(content);
			
			try {
				bs.writeWithFileInfo(board, files);
			} catch (IOException e) {
				e.printStackTrace();
				result.put("code", "error");
				result.put("msg","<font color=red><b>글을 등록하는 중 오류가 발생했습니다.</b></font>");
			}
		}
		
		return result;
		
	}
	
	//글쓰기 받아오는
	@RequestMapping("fileUpload.do")
	@ResponseBody
	public List<Attachment> fileUpload(@RequestParam HashMap<String,Object> params,HttpSession session,MultipartHttpServletRequest mReq) throws IOException {
		
		log.debug("JYS fileUpload.do = " + params);
		
		Map<String,MultipartFile> fileMap =  mReq.getFileMap();
		
		List<Attachment> attaches = new ArrayList<Attachment>();
		
		for(MultipartFile mf : fileMap.values()) {
	              attaches.add(fu.copyToTmpFolder(mf, params.get("docType").toString()));
		}
		
		return attaches;
		
	}
	
	@RequestMapping("delfile.do")
	@ResponseBody
	public void delfile(@RequestParam HashMap<String,Object> params) {
		
		log.debug("JYS delfile.do = " + params);
		
		String fakeName = params.get("fakeName").toString();
		
		fu.delfile(fakeName);
	
	}
	

}
